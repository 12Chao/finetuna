from ocpmodels.models.gemnet.gemnet import GemNetT
from typing import Optional


class DescriptorGemNetT(GemNetT):
    def __init__(
        self,
        num_atoms: Optional[int],
        bond_feat_dim: int,
        num_targets: int,
        num_spherical: int,
        num_radial: int,
        num_blocks: int,
        emb_size_atom: int,
        emb_size_edge: int,
        emb_size_trip: int,
        emb_size_rbf: int,
        emb_size_cbf: int,
        emb_size_bil_trip: int,
        num_before_skip: int,
        num_after_skip: int,
        num_concat: int,
        num_atom: int,
        regress_forces: bool = True,
        direct_forces: bool = False,
        cutoff: float = 6,
        max_neighbors: int = 50,
        rbf: dict = ...,
        envelope: dict = ...,
        cbf: dict = ...,
        extensive: bool = True,
        otf_graph: bool = False,
        use_pbc: bool = True,
        output_init: str = "HeOrthogonal",
        activation: str = "swish",
        scale_file: Optional[str] = None,
    ):
        super().__init__(
            num_atoms,
            bond_feat_dim,
            num_targets,
            num_spherical,
            num_radial,
            num_blocks,
            emb_size_atom,
            emb_size_edge,
            emb_size_trip,
            emb_size_rbf,
            emb_size_cbf,
            emb_size_bil_trip,
            num_before_skip,
            num_after_skip,
            num_concat,
            num_atom,
            regress_forces,
            direct_forces,
            cutoff,
            max_neighbors,
            rbf,
            envelope,
            cbf,
            extensive,
            otf_graph,
            use_pbc,
            output_init,
            activation,
            scale_file,
        )
